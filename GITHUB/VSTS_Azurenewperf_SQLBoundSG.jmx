<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="VSTS_Azurenewperf_SQLBound" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="longandlat" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="longstartloc" elementType="Argument">
            <stringProp name="Argument.name">longstartloc</stringProp>
            <stringProp name="Argument.value">-122.${__Random(100,500)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="latstartloc" elementType="Argument">
            <stringProp name="Argument.name">latstartloc</stringProp>
            <stringProp name="Argument.value">${__Random(37,38)}.${__Random(100,500)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="latendloca" elementType="Argument">
            <stringProp name="Argument.name">latendloca</stringProp>
            <stringProp name="Argument.value">${__Random(37,38)}.${__Random(500,1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="longendloc" elementType="Argument">
            <stringProp name="Argument.name">longendloc</stringProp>
            <stringProp name="Argument.value">-122.${__Random(501,1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="geo" elementType="Argument">
            <stringProp name="Argument.name">geo</stringProp>
            <stringProp name="Argument.value">${__Random(100,999,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="distance" elementType="Argument">
            <stringProp name="Argument.name">distance</stringProp>
            <stringProp name="Argument.value">${__Random(7,50,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="distance1" elementType="Argument">
            <stringProp name="Argument.name">distance1</stringProp>
            <stringProp name="Argument.value">${__Random(1125,5647,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import java.text.SimpleDateFormat; 
    import java.util.Date; 

    Date date = new Date(); 
    date.setDate(date.getDate()-10); 
    SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
    // or: SimpleDateFormat df = new SimpleDateFormat(&quot;MM-dd-yyyy&quot;); 
    String formattedDate = df.format(date); 
    vars.put(&quot;gtTime&quot;,formattedDate); </stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="roundtrip" elementType="Argument">
            <stringProp name="Argument.name">roundtrip</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ltTime" elementType="Argument">
            <stringProp name="Argument.name">ltTime</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DriveParseID" elementType="Argument">
            <stringProp name="Argument.name">DriveParseID</stringProp>
            <stringProp name="Argument.value">DriveParseID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Performance-Environment" elementType="Argument">
            <stringProp name="Argument.name">Performance-Environment</stringProp>
            <stringProp name="Argument.value">miqapi-perf2.mobiledatalabs.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">50000</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">Report_Counter</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AzureSQL_Bound_Updated_Master" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1506575535000</longProp>
        <longProp name="ThreadGroup.end_time">1506748335000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">900</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">Usernames.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">LoginId</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="sql bound test for 200k users" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;app&quot;: &quot;miq&quot;,&#xd;
    &quot;appVersion&quot;: &quot;1.12.1&quot;,&#xd;
&quot;deviceId&quot;: &quot;I148422854${__Random(0,1000,)}&quot;,&#xd;
&quot;deviceInfo&quot;: &quot;motorola,XT1562,MPD24.65-18,6.0&quot;,&#xd;
&quot;platform&quot;: &quot;android&quot;,&#xd;
&quot;platformVersion&quot;: &quot;6.0&quot;,&#xd;
&quot;password&quot;: &quot;td&quot;,&#xd;
&quot;username&quot;: &quot;${LoginId}&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/1/account/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                    <stringProp name="Header.value">A521B923-43EE-4243-89B8-A3B9BC885D39</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                    <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                    <stringProp name="Header.value">1:android:789</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Session token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">newsessionToken</stringProp>
                <stringProp name="RegexExtractor.regex">sessionToken&quot;:\s&quot;(.*)\b</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">000000</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extractor objectId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">objectId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;objectId&quot;: &quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">default Value</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="settings" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/1/settings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                    <stringProp name="Header.value">A521B923-43EE-4243-89B8-A3B9BC885D39</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                    <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                    <stringProp name="Header.value">1:android:789</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1128860764">&quot;maps&quot;: 3</stringProp>
                  <stringProp name="939438791">&quot;mapsStaticMap3Android&quot;: &quot;https://dev.virtualearth.net/REST/v1/Imagery/Map/Road</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">timestamp</stringProp>
                <stringProp name="RegexExtractor.regex">timestamp&quot;: (.*)\b</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0000</stringProp>
                <stringProp name="RegexExtractor.match_number">00</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="create_named_locations_dataclass" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">30</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                  <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                  <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                  <stringProp name="Header.value">1:android:789</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                  <stringProp name="Header.value">${objectId}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
              <intProp name="InterleaveControl.style">1</intProp>
            </RandomController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
         &quot;latitude&quot;: 41.${geo}61165032919,&#xd;
   &quot;longitude&quot;: -104.${geo}5774676227&#xd;
    },&#xd;
    &quot;name&quot;: &quot;work&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
      &quot;latitude&quot;: 33.${geo}58255975117,&#xd;
   &quot;longitude&quot;: -84.${geo}01591978927&#xd;
    },&#xd;
    &quot;name&quot;: &quot;home&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
          &quot;latitude&quot;: 38.${geo}48621252915,&#xd;
   &quot;longitude&quot;:-94.${geo}1925365566&#xd;
    },&#xd;
    &quot;name&quot;: &quot;home&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot;: 34.${geo}79894398849,&#xd;
   &quot;longitude&quot;: -114.${geo}590646516&#xd;
    },&#xd;
    &quot;name&quot;: &quot;home&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot;: 40.${geo}05631732649,&#xd;
   &quot;longitude&quot;: -75.${geo}4666489192&#xd;
    },&#xd;
    &quot;name&quot;: &quot;travel&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot;: 49.${geo}83728166016,&#xd;
   &quot;longitude&quot;: -97.${geo}37812362026&#xd;
    },&#xd;
    &quot;name&quot;: &quot;work&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
         &quot;latitude&quot;: 33.${geo}81564718428,&#xd;
   &quot;longitude&quot;: -116.${geo}7883828913&#xd;
    },&#xd;
    &quot;name&quot;: &quot;work&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
         &quot;latitude&quot;: 32.${geo}91224,&#xd;
   &quot;longitude&quot;: -96.${geo}60727&#xd;
    },&#xd;
    &quot;name&quot;: &quot;office&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_named_locations_dataclass" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;createdAt&quot; : {&#xd;
     &quot;iso&quot;: &quot;${__time(yyyy-MM-dd HH:${__Random(50,55)}:ss)}Z&quot;,&#xd;
     &quot;type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: &quot;t&quot;,&#xd;
    &quot;location&quot;: {&#xd;
     &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot;: 51.${geo}6420135498,&#xd;
   &quot;longitude&quot;: -0.${geo}7210006117821&#xd;
    },&#xd;
    &quot;name&quot;: &quot;work&quot;,&#xd;
    &quot;status&quot;: 0,&#xd;
    &quot;updatedAt&quot;: {&#xd;
        &quot;iso&quot;: &quot;${__javaScript(new Date().getTime();)}.187012&quot;,&#xd;
        &quot;_type&quot;: &quot;Date&quot;&#xd;
    },&#xd;
    &quot;user&quot; : {&#xd;
        &quot;className&quot;: &quot;_User&quot;,&#xd;
        &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
        &quot;_type&quot;: &quot;Pointer&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/NamedLocation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Drive_Create" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Drive_Create" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">true</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>100.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Drive_Parseid</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;objectId&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NA</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                    <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                    <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                    <stringProp name="Header.value">1:android:789</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                    <stringProp name="Header.value">${objectId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
                <intProp name="InterleaveControl.style">1</intProp>
              </RandomController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
  &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;longitude&quot; : -105.${geo}524905851,&#xd;
        &quot;latitude&quot; : 40.${geo}50264672854&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;longitude&quot; : -104.${geo}5774676227,&#xd;
        &quot;latitude&quot; : 41.${geo}61165032919&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Fort Collins&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Fort Collins&quot;,&#xd;
 &quot;endLocState&quot;: &quot;CO&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;Medical_Demo&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
   &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot;: 41.${geo}61165032919,&#xd;
   &quot;longitude&quot;: -104.${geo}5774676227&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 41.${geo}61165032919,&#xd;
   &quot;longitude&quot;: -104.${geo}5774676227&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Cheyenne&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Cheyenne&quot;,&#xd;
 &quot;startLocState&quot;: &quot;WY&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(8,9)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
  &quot;longitude&quot; : -84.${geo}64686604968,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot; : 33.${geo}3999577293&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;longitude&quot;: -84.${geo}64686604968,&#xd;
   &quot;latitude&quot;: 33.${geo}3999577293&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Roswell&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Roswell&quot;,&#xd;
 &quot;endLocState&quot;: &quot;GA&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;work&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
    &quot;__type&quot;: &quot;GeoPoint&quot;,&#xd;
		&quot;latitude&quot;: 33.${geo}58255975117,&#xd;
		&quot;longitude&quot;: -84.${geo}01591978927&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 33.${geo}58255975117,&#xd;
   &quot;longitude&quot;: -84.${geo}01591978927&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Lilburn&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Lilburn&quot;,&#xd;
 &quot;startLocState&quot;: &quot;GA&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(8,9)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
 &quot;longitude&quot; : -94.${geo}1172355129,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot; : 38.${geo}96555384984&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
     &quot;longitude&quot;: -94.${geo}1172355129,&#xd;
   &quot;latitude&quot;: 38.${geo}96555384984&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Prairie Village&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Prairie Village&quot;,&#xd;
 &quot;endLocState&quot;: &quot;KS&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
      &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(14,15)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;travel&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
   &quot;longitude&quot; : -94.${geo}1925365566,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot; : 38.${geo}48621252915&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
    &quot;latitude&quot;: 38.${geo}48621252915,&#xd;
   &quot;longitude&quot;:-94.${geo}1925365566&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Merriam&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Merriam&quot;,&#xd;
 &quot;startLocState&quot;: &quot;KS&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(12,13)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(16,17)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
&quot;longitude&quot; : -114.${geo}5229522916,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot; : 34.${geo}54344239034&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;longitude&quot;: -114.${geo}5229522916,&#xd;
   &quot;latitude&quot;: 34.${geo}54344239034&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Lake Havasu City&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Lake Havasu City&quot;,&#xd;
 &quot;endLocState&quot;: &quot;AZ&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;meetings&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
  &quot;__type&quot;: &quot;GeoPoint&quot;,&#xd;
		&quot;latitude&quot;: 34.${geo}79894398849,&#xd;
		&quot;longitude&quot;: -114.${geo}590646516&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 34.${geo}79894398849,&#xd;
   &quot;longitude&quot;: -114.${geo}590646516&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Lake Havasu City&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Lake Havasu City&quot;,&#xd;
 &quot;startLocState&quot;: &quot;AZ&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(8,9)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
   &quot;longitude&quot; :-75.${geo}63552000329,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot; : 40.${geo}27082542703&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;longitude&quot;: -75.${geo}63552000329,&#xd;
   &quot;latitude&quot;: 40.${geo}27082542703&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Whitemarsh Township&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Whitemarsh Township&quot;,&#xd;
 &quot;endLocState&quot;: &quot;PA&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;offcial&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
  &quot;longitude&quot; : -75.${geo}4666489192,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;latitude&quot; : 40.${geo}05631732649&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 40.${geo}05631732649,&#xd;
   &quot;longitude&quot;: -75.${geo}4666489192&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Maple Glen&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Maple Glen&quot;,&#xd;
 &quot;startLocState&quot;: &quot;PA&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(8,9)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
   &quot;longitude&quot; : -97.${geo}556520106,&#xd;
        &quot;latitude&quot; : 49.${geo}33426121342,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;longitude&quot;: -97.${geo}556520106,&#xd;
   &quot;latitude&quot;: 49.${geo}33426121342&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Peguis&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Peguis&quot;,&#xd;
 &quot;endLocState&quot;: &quot;MB&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
      &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(14,15)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;personal&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
  &quot;longitude&quot; : -97.${geo}37812362026,&#xd;
        &quot;latitude&quot; : 49.${geo}83728166016,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 49.${geo}83728166016,&#xd;
   &quot;longitude&quot;: -97.${geo}37812362026&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Winnipeg&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Winnipeg&quot;,&#xd;
 &quot;startLocState&quot;: &quot;MB&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(12,13)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(16,17)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
  &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;longitude&quot; : -117.${geo}5585648974,&#xd;
        &quot;latitude&quot; : 34.${geo}41372234692&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;longitude&quot;: -117.${geo}5585648974,&#xd;
   &quot;latitude&quot;: 34.${geo}41372234692&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;San Bernardino&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;San Bernardino&quot;,&#xd;
 &quot;endLocState&quot;: &quot;CA&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;officetrip&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
    &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;longitude&quot; : -116.${geo}7883828913,&#xd;
        &quot;latitude&quot; : 33.${geo}81564718428&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 33.${geo}81564718428,&#xd;
   &quot;longitude&quot;: -116.${geo}7883828913&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Beaumont&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Beaumont&quot;,&#xd;
 &quot;startLocState&quot;: &quot;CA&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(8,9)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(10,11)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
  &quot;latitude&quot; : 33.${geo}35173,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;longitude&quot; : -96.${geo}3593&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;longitude&quot;: -96.${geo}3593,&#xd;
   &quot;latitude&quot;: 33.${geo}35173&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Dallas&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Dallas&quot;,&#xd;
 &quot;endLocState&quot;: &quot;TX&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
      &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(14,15)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;office&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
  &quot;latitude&quot; : 32.${geo}91224,&#xd;
        &quot;__type&quot; : &quot;GeoPoint&quot;,&#xd;
        &quot;longitude&quot; : -96.${geo}60727&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 32.${geo}91224,&#xd;
   &quot;longitude&quot;: -96.${geo}60727&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Irving&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Irving&quot;,&#xd;
 &quot;startLocState&quot;: &quot;TX&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(12,13)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(16,17)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_create" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
 &quot;user&quot;: {&#xd;
   &quot;_type&quot;: &quot;Pointer&quot;,&#xd;
   &quot;objectId&quot;: &quot;${objectId}&quot;,&#xd;
   &quot;className&quot;: &quot;_User&quot;&#xd;
 },&#xd;
 &quot;state&quot;: 0,&#xd;
 &quot;category&quot;: 2,&#xd;
 &quot;distance&quot;: ${distance}.${distance1},&#xd;
 &quot;endLoc&quot;: {&#xd;
  &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
   &quot;longitude&quot;: -1.${geo}653000831604,&#xd;
   &quot;latitude&quot;: 53.${geo}47998046875&#xd;
 },&#xd;
 &quot;endLocation&quot;: {&#xd;
   &quot;latitude&quot;: 53.${geo}47998046875,&#xd;
   &quot;longitude&quot;: -1.${geo}653000831604&#xd;
 },&#xd;
 &quot;endLocName&quot;: &quot;Leeds&quot;,&#xd;
 &quot;endLocCity&quot;: &quot;Leeds&quot;,&#xd;
 &quot;endLocState&quot;: &quot;WY&quot;,&#xd;
 &quot;endLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;endedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
      &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(14,15)}:${__Random(10,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;googleDistance&quot;: ${distance}.${distance1},&#xd;
 &quot;notes&quot;: null,&#xd;
 &quot;parkingFees&quot;: 0,&#xd;
 &quot;purpose&quot;: &quot;Medical_Demo&quot;,&#xd;
 &quot;startLoc&quot;: {&#xd;
   &quot;_type&quot;: &quot;GeoPoint&quot;,&#xd;
   &quot;longitude&quot;: -0.${geo}7210006117821,&#xd;
   &quot;latitude&quot;: 51.${geo}6420135498&#xd;
 },&#xd;
 &quot;startLocation&quot;: {&#xd;
   &quot;latitude&quot;: 51.${geo}6420135498,&#xd;
   &quot;longitude&quot;: -0.${geo}7210006117821&#xd;
 },&#xd;
 &quot;startLocName&quot;: &quot;Fort Collins&quot;,&#xd;
 &quot;startLocCity&quot;: &quot;Fort Collins&quot;,&#xd;
 &quot;startLocState&quot;: &quot;CO&quot;,&#xd;
 &quot;startLocCountry&quot;: &quot;United States&quot;,&#xd;
 &quot;startedAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(12,13)}:${__Random(01,15)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;timeZoneDiffInHours&quot;: 0,&#xd;
 &quot;tollFees&quot;: 0,&#xd;
 &quot;vehicle&quot;: null,&#xd;
 &quot;vehicleId&quot;: null,&#xd;
 &quot;autoClassified&quot;: 0,&#xd;
 &quot;endNamedLocationId&quot;: null,&#xd;
 &quot;startNamedLocationId&quot;: null,&#xd;
 &quot;location_service&quot;: 3,&#xd;
 &quot;createdAt&quot;: {&#xd;
   &quot;_type&quot;: &quot;Date&quot;,&#xd;
   &quot;iso&quot;: &quot;${__time(yyyy-MM-dd ${__Random(16,17)}:${__Random(01,05)}:ss)}Z&quot;&#xd;
 },&#xd;
 &quot;userId&quot;: &quot;${objectId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="User_Month_Stats_API" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserMonthStat" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/1/classes/UserMonthStats?order=-monthDate</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                    <stringProp name="Header.value">A521B923-43EE-4243-89B8-A3B9BC885D39</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                    <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                    <stringProp name="Header.value">1:android:789</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-MileIQ-Session-Token" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Session-Token</stringProp>
                    <stringProp name="Header.value">${newsessionToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;401&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="User_Settings_API" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User_Settings_API" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/1/settings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                    <stringProp name="Header.value">A521B923-43EE-4243-89B8-A3B9BC885D39</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                    <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                    <stringProp name="Header.value">1:android:789</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-MileIQ-Session-Token" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Session-Token</stringProp>
                    <stringProp name="Header.value">${newsessionToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="drive_classes_get" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>55.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${objectId}&quot; != &quot;NAME&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_get" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="where" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">{&quot;endedAt&quot;: {&quot;$gte&quot;: {&quot;__type&quot;: &quot;Date&quot;, &quot;iso&quot;: &quot;${gtTime}T00:00:00Z&quot;}, &quot;$lt&quot;: {&quot;__type&quot;: &quot;Date&quot;, &quot;iso&quot;: &quot;${ltTime}T23:59:59Z&quot;}}, &quot;user&quot;: {&quot;__type&quot;: &quot;Pointer&quot;, &quot;className&quot;: &quot;whocares&quot;, &quot;objectId&quot;: &quot;${objectId}&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">where</stringProp>
                    </elementProp>
                    <elementProp name="roundtrip" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${roundtrip}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">roundtrip</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">1/classes/Drive</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                      <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                      <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                      <stringProp name="Header.value">1:android:789</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                      <stringProp name="Header.value">${objectId}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="drive_classes_update" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>45.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;Drive_Parseid&quot; == &quot;Drive_Parseid&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_update" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;state&quot;: 1,&#xd;
 &quot;category&quot;: 2&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/Drive/${Drive_Parseid}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                      <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                      <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                      <stringProp name="Header.value">1:android:789</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                      <stringProp name="Header.value">${objectId}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="send_heartbeat" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>20.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="send_heartbeat" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;:&quot;A1496741609${__Random(50111,101200,)}&quot;,&#xd;
&quot;locationServicesEnabled&quot;:&quot;true&quot;,&#xd;
&quot;queued&quot;:0,&#xd;
&quot;deviceTimestamp&quot;:&quot;${__time(yyyy-MM-dd HH:${__Random(20,30)}:ss)}Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/1/heartbeat</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                    <stringProp name="Header.value">A521B923-43EE-4243-89B8-A3B9BC885D39</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                    <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                    <stringProp name="Header.value">1:android:789</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-MileIQ-Session-Token" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Session-Token</stringProp>
                    <stringProp name="Header.value">${newsessionToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;401&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="report_daterange" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="report_daterange" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&#xd;
&quot;categoryIds&quot;:[1, 2],&#xd;
&quot;cc&quot;:&quot;v-bhruda@microsoft.com&quot;,&#xd;
&quot;client&quot;:&quot;&quot;,&#xd;
&quot;endTimestamp&quot;:&quot;2017-05-16T23:23:59.999Z&quot;,&#xd;
&quot;expenseService&quot;:&quot;email&quot;,&#xd;
&quot;isSubmission&quot;:&quot;t&quot;,&#xd;
&quot;notes&quot;: &quot;PerftestingDemo&quot;,&#xd;
&quot;project&quot;:&quot;&quot;,&#xd;
&quot;projectName&quot;:&quot;Fotofocus Construction&quot;,&#xd;
&quot;reimbursementRates&quot;:{&quot;business&quot;: null},&#xd;
&quot;reportName&quot;:&quot;PerfReport${__Random(1,500,)}&quot;,&#xd;
&quot;reportType&quot;:&quot;custom&quot;,&#xd;
&quot;shouldReport&quot;: true,&#xd;
&quot;source&quot;:&quot;dateRange&quot;,&#xd;
&quot;startTimestamp&quot;:&quot;2017-01-01T00:01:00.000Z&quot;,&#xd;
&quot;submissionDate&quot;:&quot;2017-12-18T10:20:52.604Z&quot;,&#xd;
&quot;submitter&quot;:&quot;&quot;,&#xd;
&quot;firstTimeZoneDiffInHours&quot;:5.5,&#xd;
&quot;lastTimeZoneDiffInHours&quot;:5.5,&#xd;
&quot;useMetric&quot;:&quot;f&quot;,&#xd;
&quot;vehicleIds&quot;:[]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/1/report/daterange</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">submissionEventKey</stringProp>
                <stringProp name="RegexExtractor.regex">submissionEventKey&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NA</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                    <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                    <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                    <stringProp name="Header.value">1:android:789</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                    <stringProp name="Header.value">${objectId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="drive_classes_multi_update" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;Drive_Parseid&quot; == &quot;Drive_Parseid&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="drive_classes_multi_update" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[{&#xd;
&quot;objectId&quot;: &quot;${Drive_Parseid}&quot;,&#xd;
    &quot;state&quot;: 1,&#xd;
&quot;category&quot;: 2&#xd;
}]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${Performance-Environment}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/Drive</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                      <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                      <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                      <stringProp name="Header.value">1:android:789</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                      <stringProp name="Header.value">${objectId}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="get_user_for_id_dataclass" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="get_user_for_id_dataclass" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">true</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>55.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_user_for_id_dataclass" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">miqapi-perf2.mobiledatalabs.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/classes/User/${objectId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                      <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                      <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                      <stringProp name="Header.value">1:android:789</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                      <stringProp name="Header.value">${objectId}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="GetWorkhours" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="GetWorkhours" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">true</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>55.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWorkhours" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="where" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">{&quot;endedAt&quot;: {&quot;$gte&quot;: {&quot;__type&quot;: &quot;Date&quot;, &quot;iso&quot;: &quot;${gtTime}T00:00:00Z&quot;}, &quot;$lt&quot;: {&quot;__type&quot;: &quot;Date&quot;, &quot;iso&quot;: &quot;${ltTime}T23:59:59Z&quot;}}, &quot;user&quot;: {&quot;__type&quot;: &quot;Pointer&quot;, &quot;className&quot;: &quot;whocares&quot;, &quot;objectId&quot;: &quot;${objectId}&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">where</stringProp>
                    </elementProp>
                    <elementProp name="roundtrip" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${roundtrip}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">roundtrip</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">miqapi-perf2.mobiledatalabs.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/1/work-hours</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-API-Key</stringProp>
                      <stringProp name="Header.value">1BD272D1-3DC4-4AF4-BCC6-D125C521788C</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Application-Id</stringProp>
                      <stringProp name="Header.value">E7EC264F-F470-4C7C-95AF-4B5D08C57346</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Device-Type</stringProp>
                      <stringProp name="Header.value">1:android:789</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-MileIQ-Acting-On</stringProp>
                      <stringProp name="Header.value">${objectId}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
